{"ast":null,"code":"import React, { useState } from 'react';\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nvar getNavStyles = function getNavStyles(indx, length) {\n  var styles = [];\n\n  for (var i = 0; i < length; i++) {\n    if (i < indx) {\n      styles.push('done');\n    } else if (i === indx) {\n      styles.push('doing');\n    } else {\n      styles.push('todo');\n    }\n  }\n\n  return styles;\n};\n\nvar getButtonsState = function getButtonsState(indx, length) {\n  if (indx > 0 && indx < length - 1) {\n    return {\n      showPreviousBtn: true,\n      showNextBtn: true\n    };\n  } else if (indx === 0) {\n    return {\n      showPreviousBtn: false,\n      showNextBtn: true\n    };\n  } else {\n    return {\n      showPreviousBtn: true,\n      showNextBtn: false\n    };\n  }\n};\n\nfunction MultiStep(props) {\n  var _useState = useState(getNavStyles(0, props.steps.length)),\n      _useState2 = _slicedToArray(_useState, 2),\n      stylesState = _useState2[0],\n      setStyles = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      compState = _useState4[0],\n      setComp = _useState4[1];\n\n  var _useState5 = useState(getButtonsState(0, props.steps.length)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      buttonsState = _useState6[0],\n      setButtons = _useState6[1];\n\n  function setStepState(indx) {\n    setStyles(getNavStyles(indx, props.steps.length));\n    setComp(indx < props.steps.length ? indx : compState);\n    setButtons(getButtonsState(indx, props.steps.length));\n  }\n\n  var next = function next() {\n    return setStepState(compState + 1);\n  };\n\n  var previous = function previous() {\n    return setStepState(compState > 0 ? compState - 1 : compState);\n  };\n\n  var handleKeyDown = function handleKeyDown(evt) {\n    return evt.which === 13 ? next(props.steps.length) : {};\n  };\n\n  var handleOnClick = function handleOnClick(evt) {\n    if (evt.currentTarget.value === props.steps.length - 1 && compState === props.steps.length - 1) {\n      setStepState(props.steps.length);\n    } else {\n      setStepState(evt.currentTarget.value);\n    }\n  };\n\n  var renderSteps = function renderSteps() {\n    return props.steps.map(function (s, i) {\n      return React.createElement(\"li\", {\n        className: 'progtrckr-' + stylesState[i],\n        onClick: handleOnClick,\n        key: i,\n        value: i\n      }, React.createElement(\"em\", null, i + 1), React.createElement(\"span\", null, props.steps[i].name));\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    onKeyDown: handleKeyDown\n  }, React.createElement(\"ol\", {\n    className: \"progtrckr\"\n  }, renderSteps()), props.steps[compState].component, React.createElement(\"div\", {\n    style: props.showNavigation ? {} : {\n      display: 'none'\n    }\n  }, React.createElement(\"button\", {\n    style: buttonsState.showPreviousBtn ? {} : {\n      display: 'none'\n    },\n    onClick: previous\n  }, \"Previous\"), React.createElement(\"button\", {\n    style: buttonsState.showNextBtn ? {} : {\n      display: 'none'\n    },\n    onClick: next\n  }, \"Next\")));\n}\n\nMultiStep.defaultProps = {\n  showNavigation: true\n};\nexport default MultiStep;","map":null,"metadata":{},"sourceType":"module"}